AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  mappingDbHost:
    Type: String
    Default: portfolioData
  apiRelease:
    Type: String
  deploybucket:
    Type: String

Resources: 
  # Create a role
  StockhooLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Description: "Role for performing functions on the site"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      RoleName: "StockhooLambdaRole"  

  # Create API gateway
  StockhooApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: StockhooApiGateway
      Parameters:
        endpointConfigurationTypes: EDGE

  # Create API Gateway Resource
  StockResource:  
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: StockhooApiGateway
    Properties:
      RestApiId: !Ref "StockhooApiGateway"
      ParentId: !GetAtt
        - StockhooApiGateway
        - RootResourceId
      PathPart: positions 

  # Create API Gateway Methods
  stocksGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      OperationName: "GetStocks"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "StockGetLambda.Arn"
      RestApiId: !Ref StockhooApiGateway
      ResourceId: !Ref StockResource

  # Create API Gateway Method Options
  StockResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref "StockhooApiGateway"
      ResourceId: !Ref "StockResource"
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Create API Deployment
  StockApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "stocksGetMethod"
    Properties:
      RestApiId: !Ref StockhooApiGateway

  # Create API Stage
  StockNonProd:
    Type: AWS::ApiGateway::Stage
    DependsOn: StockhooApiGateway
    Properties:
      StageName: "NonProd"
      Description: "Non Prod stage for Stocks Api Gateway"
      RestApiId: !Ref StockhooApiGateway
      DeploymentId: !Ref StockApiDeployment

  # Create Database table
  StockhooTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "TradeID"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "TradeID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: stocks

# Create lambda 
  StockGetLambda:
    Type: AWS::Lambda::Function 
    Properties:
      FunctionName: StockhooGetLambda
      Role: !GetAtt StockhooLambdaRole.Arn
      Handler: index.handler
      Runtime: nodejs16.x
      Code:
        S3Bucket: !Ref deploybucket
        S3Key: !Sub "${apiRelease}/lambda-src/src/stockhooGet.zip"
      Environment:
        Variables:
          DB_HOST: !Ref "mappingDbHost"
      Timeout: 60

# Lambda Permission For API GateWay
  lambdaApiGatewayInvokeGetStocks:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref "StockGetLambda"
      Principal: "apigateway.amazonaws.com"
